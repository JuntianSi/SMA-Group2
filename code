# Import the required packages

import simpy
import numpy as np
import math

global N, nr_servers
global env
env = simpy.Environment()
# Define the number of scans to process
N = 1000

# Define the number of servers for each workstation
nr_servers = {
    0: 3,  # Number of servers for workstation 0
    1: 2,  # Number of servers for workstation 1
    2: 4,  # Number of servers for workstation 2
    3: 3,  # Number of servers for workstation 3
    4: 1  # Number of servers for workstation 4
}

np.random.seed(1234)


# Arrival rates for various workstations
lamb = {0: 1/0.25, 1: 1/1}

def exponential_distribution(lambda_value):
    """Creates a random value following an exponential distribution."""
    j1 = np.random.uniform(0, 1)
    j1 = max(j1, 0.0001)  # Ensure j1 is not zero
    j2 = -math.log(j1) / lambda_value
    return j2

def interarrival_R():
    """Generates the interarrival time for scan coming from the radiology department."""
    return exponential_distribution(lamb[0])

def interarrival_D():
    """Generates the interarrival time for scan coming from the other diagnostics departments."""
    return exponential_distribution(lamb[1])

def job_type_R():
    """Creates a random value determining the job type (source: Radiology)."""
    return np.random.choice(np.arange(1, 5), p=[0.2, 0.2, 0.1, 0.5])

def job_type_D():
    """Creates a random value determining the job type (source: Other Diagnostics Dep)."""
    return np.random.choice(np.arange(1, 5), p=[0, 0.4, 0, 0.6])


class Scan:
    """
    Class representing a scan with associated time, job type, and id.
    """

    def __init__(self, time, jobtype, id):
        """
        Initialize Scan instance.

        Parameters:
        time : float
            Time at which the scan arrives at the output.
        jobtype : int
            Id of the job (1 through 4).
        id : int
            Id of the scan.
        """
        self.time = time
        self.jobtype = jobtype
        self.id = id


def random_normal_time(mean, std):
    return np.random.normal(mean, std) / 60


class Workstation:
    """
    Class representing a workstation with associated servers, scans, and utility time.
    """

    def __init__(self, env, total_servers, id):
        self.store = simpy.Store(env)
        self.env = env
        self.out = None
        self.scan_arrived = 0  # Keeps track of scans arriving
        self.server = simpy.Resource(env, total_servers)  # servers are Resources in our system
        self.ut_t = []
        self.id = id
        self.job_times = {
            1: {1: (12, 2), 2: (15, 2), 3: (15, 3)},
            2: {1: (20, 4), 3: (21, 3), 4: (18, 3)},
            3: {1: (16, 4), 2: (14, 2), 3: (10, 1)},
            4: {2: (20, 3), 3: (24, 4), 4: (13, 2)},
            5: {1: (25, 5), 3: (20, 3), 4: (25, 5)},
        }

    def process(self, x):
        """
        Process a job.

        Parameters:
        x : object
            Scan object representing the job to be processed.
        """
        self.scan_arrived += 1
        job = x.jobtype
        mean, std = self.job_times[self.id].get(job, (0, 0))
        pt = random_normal_time(mean, std)
        yield env.timeout(pt)


ws1 = Workstation(env, nr_servers[0], id=1)
ws2 = Workstation(env, nr_servers[1], id=2)
ws3 = Workstation(env, nr_servers[2], id=3)
ws4 = Workstation(env, nr_servers[3], id=4)
ws5 = Workstation(env, nr_servers[4], id=5)


class System(object):

    def __init__(self, env, source, interarrival, jobtype, file, delay=0):
        self.env = env
        self.source = source
        self.interarrival = interarrival
        self.jobtype = jobtype
        self.file = file
        self.delay = delay
        self.total_scans = 0
        self.action = env.process(self.scan_arrivals_departures())

    def scan_arrivals_departures(self):
        yield self.env.timeout(self.delay)
        while self.is_scan_limit_not_reached():
            yield self.env.timeout(self.interarrival())  # Note point in time at which the scan arrives
            self.total_scans += 1  # Increment total scans by 1
            s = Scan(self.env.now, self.jobtype(), self.total_scans)  # Assign the scan its identity using Scan class
            self.write_to_file(s.id, self.source, self.env.now)
            env.process(wsArrival_wsDeparture_systemDeparture(env, s,
                                                              self))  # Let the scan run through the required ws and leave

    def is_scan_limit_not_reached(self):
        return rscans.total_scans + dscans.total_scans + 1 < N

    def write_to_file(self, scan_id, source, now):
        self.file.write(f'NEW SCAN ({scan_id}); SOURCE ({source}); TIME ({now})\n')


def process_in_ws(env, ws, s, self):
    with ws.server.request() as request:
        yield request
        if ws.server.count < 2:
            ws.start = env.now
        self.file.write(f'ARRIVE WS ({ws.id}); TIME ({self.env.now}); SCAN ({s.id}); TYPE ({self.source})\n')
        yield env.process(ws.process(s))
        self.file.write(f'DEPARTURE WS ({ws.id}); TIME ({self.env.now}); SCAN ({s.id}); TYPE ({self.source})\n')
    if ws.server.count < 1:
        ws.ut_t.append(env.now - ws.start)

def wsArrival_wsDeparture_systemDeparture(env, s, self):
    if s.jobtype == 1:
        yield from process_in_ws(env, ws3, s, self)
        yield from process_in_ws(env, ws1, s, self)
        yield from process_in_ws(env, ws2, s, self)
        yield from process_in_ws(env, ws5, s, self)
        self.out.queue(s)
    elif s.jobtype == 2:
        yield from process_in_ws(env, ws4, s, self)
        yield from process_in_ws(env, ws1, s, self)
        yield from process_in_ws(env, ws3, s, self)
        self.out.queue(s)
    elif s.jobtype == 3:
        yield from process_in_ws(env, ws2, s, self)
        yield from process_in_ws(env, ws5, s, self)
        yield from process_in_ws(env, ws1, s, self)
        yield from process_in_ws(env, ws4, s, self)
        yield from process_in_ws(env, ws3, s, self)
        self.out.queue(s)
    elif s.jobtype == 4:
        yield from process_in_ws(env, ws2, s, self)
        yield from process_in_ws(env, ws4, s, self)
        yield from process_in_ws(env, ws5, s, self)
        self.out.queue(s)



class Queueing(object):
    def __init__(self, env):
        self.store = simpy.Store(env)
        self.env = env
        self.waits = []
        self.scan_arrived = 0

    def queue(self, scan):
        now = self.env.now
        self.waits.append(now - scan.time)  # Store waiting time
        self.scan_arrived += 1


def create(summary, ws_list, system, env):
    for i, ws in enumerate(ws_list, start=1):
        summary.write(f'Avg utilisation Station WS{i}: {round((sum(ws.ut_t)/env.now)*100, 2)}%\n')

    ut_r = sum(sum(ws.ut_t) for ws in ws_list)/len(ws_list)/env.now
    summary.write(f'Overall avg utilisation: {round(ut_r*100, 2)}%\n\n')
    ct_r = sum(system.waits)/len(system.waits)
    summary.write(f'Average cycle time: {ct_r}\n')
    summary.write(f'Processing time: {env.now}\n\n') # Is around 300, but running multiple times keeps summing up
    summary.write(f'Objective function: ct - 10p = {ct_r - 10*ut_r}\n')

# Create the packet generators and sink
data_files = ["RUN1.txt", "RUN2.txt", "RUN3.txt", "RUN4.txt", "RUN5.txt"]
summary_files = ["STATS1.txt", "STATS2.txt", "STATS3.txt", "STATS4.txt", "STATS5.txt"]

ws_list = [ws1, ws2, ws3, ws4, ws5]

for data_file, summary_file in zip(data_files, summary_files):
    with open(data_file, "w") as data, open(summary_file, "w") as summary:
        system = Queueing(env)
        rscans = System(env, "RAD", interarrival_R,  job_type_R, data)
        dscans = System(env, "DD", interarrival_D,  job_type_D, data)

        rscans.out = system
        dscans.out = system

        env.run()

        create(summary, ws_list, system, env)
